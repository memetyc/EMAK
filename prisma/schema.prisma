datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  isBanned Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role String @default("user")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model Blog {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  content String
  image String?
  slug String @unique 
  isPublished Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  description String
  eventDate DateTime
  eventEndDate DateTime?
  slug String @unique
  location String?
  createdAt DateTime @default(now())
}